# Author: Fayas (https://github.com/FayasNoushad) (@FayasNoushad)

import os
import time
import ytthumb
from dotenv import load_dotenv
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from pyrogram.errors import FloodWait, UserNotParticipant
from pymongo import MongoClient
import datetime
from fsub import force_sub, handle_force_sub_command

load_dotenv()

# MongoDB setup
MONGO_URL = os.environ.get("MONGO_URL", "mongodb+srv://anushkabot:anushkabot@cluster0.rg84dqj.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")
mongo_client = MongoClient(MONGO_URL)
db = mongo_client["youtube_thumb_bot"]
users_collection = db["users"]
stats_collection = db["stats"]

# Configuration
START_IMAGE = os.environ.get("START_IMAGE", "https://graph.org/file/8d8cfd2c5c5c3c2c8e8c8.jpg")  # Default start image URL

Bot = Client(
    "YouTube-Thumbnail-Downloader",
    bot_token = os.environ.get("BOT_TOKEN"),
    api_id = int(os.environ.get("API_ID")),
    api_hash = os.environ.get("API_HASH")
)

ADMIN_IDS = [int(id) for id in os.environ.get("ADMIN_IDS", "6974737899, 7004919486").split(",") if id]

START_TEXT = """üëã  ú·¥á è  **{}**!
·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥õ ú·¥á  è·¥è·¥ú·¥õ·¥ú ô·¥á ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á Ä  ô·¥è·¥õ üöÄ

üéØ …™'·¥ç  è·¥è·¥ú Ä …¢·¥è-·¥õ·¥è  ô·¥è·¥õ “ì·¥è Ä …¢ Ä·¥Ä ô ô…™…¥…¢  ú…™…¢ ú-«´·¥ú·¥Ä ü…™·¥õ è ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ üs …™…¥ s·¥á·¥Ñ·¥è…¥·¥Ös.

üîç ·¥° ú·¥Ä·¥õ …™ ·¥Ñ·¥Ä…¥ ·¥Ö·¥è:
‚Ä¢ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ üs …™…¥ s·¥Ö, ·¥ç«´,  ú«´, ·¥ç·¥Äx Ä·¥ás
‚Ä¢ ·¥Ä·¥Ñ·¥Ñ·¥á·¥ò·¥õs  è·¥è·¥ú·¥õ·¥ú ô·¥á  ü…™…¥·¥ãs ·¥è Ä ·¥†…™·¥Ö·¥á·¥è …™·¥Ös
‚Ä¢ «´·¥ú…™·¥Ñ·¥ã, s…™·¥ç·¥ò ü·¥á, …¥·¥è ·¥Ñ·¥Ä·¥ò

üß† ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á «´·¥ú·¥Ä ü…™·¥õ…™·¥ás: sd, mq, hq, maxres

·¥õ è·¥ò·¥á /help …™“ì  è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥Ä  ô·¥è·¥ès·¥õ üí¨

 ü·¥á·¥õ'Íú± …¢·¥á·¥õ ·¥õ ú·¥ès·¥á ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ üs üî•"""

HELP_TEXT = """üîç **How to Use:**

1Ô∏è‚É£ **Simple Download:**
   ‚Ä¢ Just send a YouTube video link or ID
   ‚Ä¢ I'll send the thumbnail in standard quality

2Ô∏è‚É£ **Quality Selection:**
   ‚Ä¢ Format: `videoID | quality`
   ‚Ä¢ Available qualities:
     - sd (Standard)
     - mq (Medium)
     - hq (High)
     - maxres (Maximum)

3Ô∏è‚É£ **Examples:**
   ‚Ä¢ `dQw4w9WgXcQ`
   ‚Ä¢ `dQw4w9WgXcQ | hq`
   ‚Ä¢ `https://youtube.com/watch?v=dQw4w9WgXcQ`

‚ùì Need more help? Contact support using the button below."""

ABOUT_TEXT = """ü§ñ **Bot Information:**

‚Ä¢ **Name:** YouTube Thumbnail Downloader
‚Ä¢ **Version:** 2.0
‚Ä¢ **Developer:** @BOT_RESURGE
‚Ä¢ **Language:** Python
‚Ä¢ **Framework:** Pyrogram

üìä **Statistics:**
‚Ä¢ Users: {}
‚Ä¢ Downloads: {}
"""

STATS_TEXT = """üìä ** ô·¥è·¥õ s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs:**

üë• ·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs: {}
üì• ·¥õ·¥è·¥õ·¥Ä ü ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ös: {}
üîÑ  ü·¥Äs·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö: {} UTC

üìà **·¥õ·¥è·¥Ö·¥Ä è's s·¥õ·¥Ä·¥õs:**
‚Ä¢ …¥·¥á·¥° ·¥ús·¥á Äs: {}
‚Ä¢ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ös: {}"""

# Enhanced buttons with emojis
MAIN_BUTTONS = [
    [
        InlineKeyboardButton("‚ùì  ú·¥á ü·¥ò", callback_data="help"),
        InlineKeyboardButton("‚ÑπÔ∏è ·¥Ä ô·¥è·¥ú·¥õ", callback_data="about")
    ],
    [
        InlineKeyboardButton("üìä s·¥õ·¥Ä·¥õs", callback_data="stats"),
        InlineKeyboardButton("üë®‚Äçüíª ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä", url='https://telegram.me/bot_resurge')
    ]
]

photo_buttons = InlineKeyboardMarkup([
    [InlineKeyboardButton('üé® ·¥è·¥õ ú·¥á Ä «´·¥ú·¥Ä ü…™·¥õ…™·¥ás', callback_data='qualities')],
    [InlineKeyboardButton("üë®‚Äçüíª ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä", url='https://telegram.me/bot_resurge')]
])

# User tracking function
async def add_user(user_id, username):
    if not users_collection.find_one({"user_id": user_id}):
        users_collection.insert_one({
            "user_id": user_id,
            "username": username,
            "joined_date": time.time()
        })

# Update stats
def update_stats(type="downloads"):
    # Update total downloads
    stats_collection.update_one(
        {"type": type},
        {"$inc": {"count": 1}},
        upsert=True
    )
    
    # Update daily downloads
    today = datetime.datetime.utcnow().strftime("%Y-%m-%d")
    stats_collection.update_one(
        {
            "type": "daily_downloads",
            "date": today
        },
        {"$inc": {"count": 1}},
        upsert=True
    )

def get_daily_stats():
    today = datetime.datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
    
    # Get today's new users
    new_users = users_collection.count_documents({
        "joined_date": {"$gte": today.timestamp()}
    })
    
    # Get today's downloads
    daily_downloads = stats_collection.find_one({
        "type": "daily_downloads",
        "date": today.strftime("%Y-%m-%d")
    })
    
    return new_users, daily_downloads["count"] if daily_downloads else 0

async def get_stats_text():
    total_users = users_collection.count_documents({})
    total_downloads = stats_collection.find_one({"type": "downloads"})
    downloads = total_downloads["count"] if total_downloads else 0
    current_time = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    
    daily_users, daily_downloads = get_daily_stats()
    
    return STATS_TEXT.format(
        total_users,
        downloads,
        current_time,
        daily_users,
        daily_downloads
    )

@Bot.on_callback_query()
async def cb_data(_, message):
    data = message.data.lower()
    
    if data == "help":
        await message.edit_message_text(
            HELP_TEXT,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="start")
            ]])
        )
    
    elif data == "stats":
        stats_text = await get_stats_text()
        await message.edit_message_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="start")
            ]])
        )
    
    elif data == "about":
        total_users = users_collection.count_documents({})
        total_downloads = stats_collection.find_one({"type": "downloads"})
        downloads = total_downloads["count"] if total_downloads else 0
        
        await message.edit_message_text(
            ABOUT_TEXT.format(total_users, downloads),
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="start")
            ]])
        )
    
    elif data == "start":
        await message.edit_message_text(
            START_TEXT.format(message.from_user.mention),
            reply_markup=InlineKeyboardMarkup(MAIN_BUTTONS)
        )
    
    elif data == "qualities":
        buttons = []
        for quality in ytthumb.qualities():
            buttons.append(
                InlineKeyboardButton(
                    text=ytthumb.qualities()[quality].upper().replace("QUALITY", "«´·¥ú·¥Ä ü…™·¥õ è").replace("STANDARD", "s·¥õ·¥Ä…¥·¥Ö·¥Ä Ä·¥Ö").replace("MEDIUM", "·¥ç·¥á·¥Ö…™·¥ú·¥ç").replace("HIGH", " ú…™…¢ ú").replace("MAXIMUM RESOLUTION", "·¥ç·¥Äx…™·¥ç·¥ú·¥ç  Ä·¥ás·¥è ü·¥ú·¥õ…™·¥è…¥"),
                    callback_data=quality
                )
            )
        await message.edit_message_reply_markup(
            InlineKeyboardMarkup([
                [buttons[0], buttons[1]],
                [buttons[2], buttons[3]],
                [InlineKeyboardButton("‚óÄÔ∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="back")]
            ])
        )
    
    elif data == "back":
        await message.edit_message_reply_markup(photo_buttons)
    
    elif data in ytthumb.qualities():
        try:
            thumbnail = ytthumb.thumbnail(
                video=message.message.reply_to_message.text,
                quality=message.data
            )
            await message.edit_message_media(
                media=InputMediaPhoto(media=thumbnail),
                reply_markup=photo_buttons
            )
            update_stats("downloads")
        except Exception as e:
            await message.answer(f"‚ùå Error: {str(e)}")

@Bot.on_message(filters.private & filters.command(["start", "help", "about"]))
async def start(bot, message):
    await add_user(message.from_user.id, message.from_user.username)
    
    command = message.command[0].lower()
    if command == "help":
        await message.reply_text(
            text=HELP_TEXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(MAIN_BUTTONS),
            quote=True
        )
    elif command == "about":
        total_users = users_collection.count_documents({})
        total_downloads = stats_collection.find_one({"type": "downloads"})
        downloads = total_downloads["count"] if total_downloads else 0
        
        await message.reply_text(
            text=ABOUT_TEXT.format(total_users, downloads),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(MAIN_BUTTONS),
            quote=True
        )
    else:
        await message.reply_photo(
            photo=START_IMAGE,
            caption=START_TEXT.format(message.from_user.mention),
            reply_markup=InlineKeyboardMarkup(MAIN_BUTTONS),
            quote=True
        )

@Bot.on_message(filters.private & filters.command("broadcast") & filters.user(ADMIN_IDS))
async def broadcast(_, message):
    if len(message.command) < 2:
        await message.reply_text("‚ùå Please provide a message to broadcast.")
        return
    
    broadcast_msg = message.text.split(None, 1)[1]
    sent = 0
    failed = 0
    status_msg = await message.reply_text("üì§ Broadcasting message...")
    
    users = users_collection.find({})
    for user in users:
        try:
            await Bot.send_message(user["user_id"], broadcast_msg)
            sent += 1
            await status_msg.edit_text(f"üîÑ Progress: {sent} sent, {failed} failed")
            time.sleep(0.1)  # To prevent flooding
        except FloodWait as e:
            time.sleep(e.value)
        except Exception:
            failed += 1
            continue
    
    await status_msg.edit_text(
        f"‚úÖ Broadcast completed!\n\n"
        f"‚úì Successfully sent: {sent}\n"
        f"‚úó Failed: {failed}"
    )

@Bot.on_message(filters.private & filters.text)
async def send_thumbnail(bot, update):
    message = await update.reply_text(
        text="üîÑ `Analyzing...`",
        disable_web_page_preview=True,
        quote=True
    )
    try:
        if " | " in update.text:
            video = update.text.split(" | ", -1)[0]
            quality = update.text.split(" | ", -1)[1]
        else:
            video = update.text
            quality = "sd"
        
        thumbnail = ytthumb.thumbnail(
            video=video,
            quality=quality
        )
        await update.reply_photo(
            photo=thumbnail,
            reply_markup=photo_buttons,
            quote=True
        )
        update_stats("downloads")
        await message.delete()
    except Exception as error:
        await message.edit_text(
            text=f"‚ùå Error: {str(error)}",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(MAIN_BUTTONS)
        )

# Add stats command handler
@Bot.on_message(filters.private & filters.command("stats"))
async def stats_command(_, message):
    # Only allow admins to use this command
    if message.from_user.id not in ADMIN_IDS:
        await message.reply_text("‚ö†Ô∏è ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥è…¥ ü è “ì·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥s.")
        return
    
    stats_text = await get_stats_text()
    await message.reply_text(
        stats_text,
        quote=True,
        reply_markup=InlineKeyboardMarkup(MAIN_BUTTONS)
    )

# Add the force sub command handler
@Bot.on_message(filters.private & filters.command("fsub"))
async def fsub_command(bot, message):
    await handle_force_sub_command(bot, message)

Bot.run()
